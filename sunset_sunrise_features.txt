#include <Arduino.h>
#include <FirebaseESP8266.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <PubSubClient.h>
#include <FS.h>
//#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#define API_KEY "AIzaSyCdrQzBlbljlRRrOX4oL5lU8-dxcKpzgR0"
#define FIREBASE_HOST "homeautomation-6d999-default-rtdb.firebaseio.com"                     //Your Firebase Project URL goes here without "http:" , "\" and "/"
#define FIREBASE_AUTH "1rknUEZTjXVlUz6avz3mx9nnHlC9zxYu1PHjBiPy"

FirebaseJson json;
FirebaseJson json2;

const int photoresistor = A0;



//^^^^ Variables used for DB^^^^^^^^

int photo_value;
int led_status;
String sunset_value;
String sunrise_value;

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig fbconfig;
String uid;

AsyncWebServer server(80);
byte Connection_Iteration = 0;

StaticJsonDocument<512> Config;

String processor(const String& var)
{
  if(var == "email")
    return Config["email"];
  else if (var == "userPassword")
    return Config["userPassword"];
  else if (var == "ssid")
    return Config["ssid"];
  else if (var == "password")
    return Config["password"];

   return String();
}


void loadConfig()
{
  File configfile = SPIFFS.open("/config.json", "r");
  deserializeJson(Config, configfile);
  configfile.close();
}

void saveConfig()
{
  File configfile = SPIFFS.open("/config.json", "w");
  serializeJson(Config, configfile);
  configfile.close();
}

int get_ledStatus(String path)
{ 
      path+="lights/light1/led_status";
    if (Firebase.getInt(fbdo, path)) {                          

       Serial.println("get_ledStatus is called");                 

       return fbdo.intData();
     

      }
      else{
        Serial.println("No light found");
        return -1;
      }
}

//----sunset feature------------------------------------

String get_sunsetValue(String path)
{
  path+="sunset";
  if (Firebase.getString(fbdo, path)) {                          

       Serial.println("get_sunsetValue is called");                 

       return fbdo.stringData();
     

      }
      else{
        Serial.println("No light found");
        return "N/A";
      }
}

void sunset(String path){
    path+="lights/light1/led_status";
   photo_value = analogRead(photoresistor);
    Serial.println(photo_value);
    if (photo_value<=500) // 3etmeh -- sunset
    {
      Firebase.RTDB.setInt(&fbdo,path,1);
//       digitalWrite(D0,HIGH);
      delay(1000);
    }
//    else{
//       Firebase.RTDB.setInt(&fbdo,path,0);
////       led_status=0;
////        digitalWrite(D0,LOW);
//       delay(2000);
//    }
}
//---------------------------------------------------

//*********** sunrise feature ***********************

String get_sunriseValue(String path)
{
  path+="sunrise";
  if (Firebase.getString(fbdo, path)) {                          

       Serial.println("get_sunriseValue is called");                 

       return fbdo.stringData();
     

      }
      else{
        Serial.println("No light found");
        return "N/A";
      }
}

void sunrise(String path){
    path+="lights/light1/led_status";
   photo_value = analogRead(photoresistor);
    Serial.println(photo_value);
    if (photo_value > 800) // mnawreh -- sunrise
    {
      Firebase.RTDB.setInt(&fbdo,path,0);
      delay(1000);
    }
//    else{
//       Firebase.RTDB.setInt(&fbdo,path,0);
////       led_status=0;
////        digitalWrite(D0,LOW);
//       delay(2000);
//    }
}

//*************************************************
void setup() {
  
    Serial.begin(115200);
    pinMode(D0,OUTPUT);
    pinMode(photoresistor,INPUT);

    if (!SPIFFS.begin()){
      ESP.restart();
    }

 // Brings data from config.json and deserialize the file to json 
   loadConfig();
   String ssid = Config["ssid"];
   String password = Config["password"];
   String email = Config["email"];
   String userPassword = Config["userPassword"];
   String APssid = Config["APssid"];
   String APpassword = Config["APpassword"];
//-----------------------------------------------------------------

  
  
   WiFi.mode(WIFI_AP_STA); // defines that WiFi mode could be either Access Point or Station(it can connect to local network)
   WiFi.softAP("ESP8266","",2);

    Serial.print("ssid: ");
    Serial.println(ssid);
    Serial.print("ssid password: ");
    Serial.println(password);
    Serial.print("email: ");
    Serial.println(email);
    Serial.print("pass: ");
    Serial.println(userPassword);

    server.begin();

//------ Brings html and css files when the server is begun--------

   server.on("/", [](AsyncWebServerRequest *request){
    String email_temp = Config["email"];
    request->send(SPIFFS, "/index.html",  String(), false, processor);
  });

  server.on("/index.css", [](AsyncWebServerRequest *request){
    
    request->send(SPIFFS, "/index.css", "text/css");
  });
  
//-----------------------------------------------------------------


//*************What actions to do when the buttons in the webpage forms are pressed********************

  server.on("/saveapconfig", HTTP_POST, [](AsyncWebServerRequest *request){
    String email_temp = request->getParam("email", true)->value();
    String userPassword_temp = request->getParam("userPassword", true)->value();
    Config["email"] = email_temp;
    Config["userPassword"] = userPassword_temp;
    saveConfig();
    request->redirect("/");    
  });
  server.on("/savewificonfig", HTTP_POST, [](AsyncWebServerRequest *request){
    String ssid_temp = request->getParam("ssid", true)->value();
    String password_temp = request->getParam("password", true)->value();
    Config["ssid"] = ssid_temp;
    Config["password"] = password_temp;
    saveConfig();
    request->redirect("/");
  });
  server.on("/restart", [](AsyncWebServerRequest *request){
    ESP.reset();
  });
  
//**************************************************************************************


  WiFi.begin(ssid, password);
   for(int i = 0 ; i < 10; i++)
    {
      if(WiFi.status() == WL_CONNECTED)
      {
        Serial.println("WiFi connected");
        Serial.println("IP address :");
        // this local ip can be accessed from other networks 
        Serial.println(WiFi.localIP());  //192.168.1.29
        goto skip;
      }
      delay(500);
    }

    // this WiFi mode changes to access point if NODEMCU could not connect to local network  
    WiFi.mode(WIFI_AP);


    skip:
//    Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);   // connect to firebase
//    Serial.println("Connected to firebase");
    fbconfig.api_key = API_KEY;
    auth.user.email = email;
    auth.user.password = userPassword;
//    Firebase.reconnectWiFi(true);
    fbdo.setResponseSize(4096);
    fbconfig.token_status_callback = tokenStatusCallback;
    fbconfig.max_token_generation_retry = 5;
    Firebase.begin(&fbconfig, &auth);
    for(int i = 0 ; i < 10; i++)
    {
      if((auth.token.uid) != ""){
         uid = auth.token.uid.c_str();
         Serial.print("User UID: ");
         Serial.print(uid);
         break;
      }     
      delay(500);
    }
}

void loop() {
  if(WiFi.status() == WL_CONNECTED ){
    Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);   // connect to firebase
    Serial.println("Connected to firebase");
    Serial.println("Connected to wifi and got the uid");
    String path="";
    path+=uid;
    path+="/rooms/room1/";
    Serial.println(path);
    led_status = get_ledStatus(path);
    Serial.println(led_status);
    sunset_value = get_sunsetValue(path); 
    Serial.println(sunset_value);
    sunrise_value = get_sunriseValue(path); 
    Serial.println(sunrise_value);
    
       if(sunset_value == "true" )
       {
        Serial.println("Sunset is true");
        sunset(path);
       }

       if (sunrise_value == "true" )
       {
          Serial.println("Sunrise is true");
          sunrise(path);
       }
       
       if(led_status == 1)
       {
        Serial.println("Light is ON");
        digitalWrite(D0,HIGH);
       }
       else{
          if(led_status == 0){
            Serial.println("Light is OFF");
            digitalWrite(D0,LOW);
          }      
        }

  }
  else{
    Firebase.reconnectWiFi(true);
  }
  delay(2000);
}