#include <Arduino.h>
#include <arduino-timer.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <PubSubClient.h>
#include <FS.h>

//Define Relay pin
#define RELAY 2

//Timer Variables
auto timer = timer_create_default();
unsigned int currentTimer = 0;
unsigned int targetTimeisSeconds = 1200; //20 Minutes

//Mqtt Client Variables
WiFiClient espClient;
PubSubClient client(espClient);

//Async WebServer Variables
AsyncWebServer server(80);
byte Connection_Iteration = 0;

//Json Variables
StaticJsonDocument<512> Config;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
//  pinMode(RELAY, OUTPUT);
//  digitalWrite(RELAY, LOW);
  
  if(!SPIFFS.begin())
  {
    ESP.restart();
  }
  
  loadConfig();
  
  String email = Config["email"];
  String userPassword = Config["userPassword"];
//  
//  WiFi.mode(WIFI_AP_STA);

  
  
  server.on("/", [](AsyncWebServerRequest *request){
    String email_temp = Config["email"];
    request->send(SPIFFS, "/index.html",  String(), false, processor);
  });

  server.on("/index.css", [](AsyncWebServerRequest *request){
    
    request->send(SPIFFS, "/index.css", "text/css");
  });



 
  server.on("/saveapconfig", HTTP_POST, [](AsyncWebServerRequest *request){
    String email_temp = request->getParam("email", true)->value();
    String userPassword_temp = request->getParam("userPassword", true)->value();
    Config["email"] = email_temp;
    Config["userPassword"] = userPassword_temp;
    saveConfig();
    request->redirect("/");
    
  });

 //when save button is pressed ( the one in WIFI form), this function will be executed 
  server.on("/savewificonfig", HTTP_POST, [](AsyncWebServerRequest *request){
    String ssid_temp = request->getParam("ssid", true)->value();
    String password_temp = request->getParam("password", true)->value();
    Config["ssid"] = ssid_temp;
    Config["password"] = password_temp;
    saveConfig();
    request->redirect("/");
  });

 

  server.on("/restart", [](AsyncWebServerRequest *request){
    ESP.reset();
  });
  server.begin();

  String ssid = Config["ssid"];
  String password = Config["password"];
  
  WiFi.begin(ssid, password);
  for(int i = 0 ; i < 10; i++)
    {
      if(WiFi.status() == WL_CONNECTED)
      {
        Serial.println("WiFi connected");
        Serial.println("IP address :");
        Serial.println(WiFi.localIP());
        goto skip;
      }
      delay(500);
    }
    WiFi.mode(WIFI_AP);
//    WiFi.mode(WIFI_AP_STA);
// 2 represents WiFi AP channnel 
// sometimes, the existing wifi around this nodemcu may have the same channel
// hence, an interference happens
// How to solve it? change the number
    WiFi.softAP("ESP8266", "",2);
    
    skip:
    Serial.println(ssid);
    Serial.println(password);
    Serial.println(email);
    Serial.println(userPassword);
  
//    Timer Setup
    timer.every(1000, timerInc);
}

bool timerInc(void *)
{
  currentTimer++;
  if(currentTimer == targetTimeisSeconds)
  {
    digitalWrite(RELAY, LOW);
    currentTimer = 0;
  }
  return true;
}

void loop() {
  // put your main code here, to run repeatedly:
//  if(!client.connected() && Connection_Iteration < 5)
//  {
//    client.connect("ESP8266Client", Config["mqttusername"], Config["mqttpassword"]);
//    delay(500);
//    Connection_Iteration++;
//  }
//  else 
//if(client.connected())
//    client.loop();
////
//  if(digitalRead(RELAY)) 
//    timer.tick();
}

void loadConfig()
{
  File configfile = SPIFFS.open("/config.json", "r");
  deserializeJson(Config, configfile);
  configfile.close();
}

void saveConfig()
{
  File configfile = SPIFFS.open("/config.json", "w");
  serializeJson(Config, configfile);
  configfile.close();
}

// to show saved data in their textfields in html 
String processor(const String& var)
{
  if(var == "email")
    return Config["email"];
  else if (var == "userPassword")
    return Config["userPassword"];
  else if (var == "ssid")
    return Config["ssid"];
  else if (var == "password")
    return Config["password"];
//  else if (var == "mqttserver")
//    return Config["mqttserver"];
//  else if (var == "mqttport")
//    return Config["mqttport"];
//  else if (var == "mqttusername")
//    return Config["mqttusername"];
//  else if (var == "mqttpassword")
//    return Config["mqttpassword"];
//  else if (var == "mqtttopic")
//    return Config["mqtttopic"];
  return String();
}
//
//void MQTTSetup()
//{
//  const char * mqttserver = Config["mqttserver"];
//  String mqttport_string = Config["mqttport"];  
//  int mqttport = mqttport_string.toInt();
//  
//  client.setServer(mqttserver, mqttport);
//  client.setCallback(callback);
//  client.connect("ESP8266Client", Config["mqttusername"], Config["mqttpassword"]);
//  client.subscribe(Config["mqtttopic"]);
//}
//
//void callback(char* topic, byte* payload, unsigned int length) 
//{ 
//  String MSG = "";
//  for (int i = 0; i < length; i++) {
//    MSG += (char)payload[i];
//  }
//  if(MSG == "ON")
//  {
//    currentTimer = 0;
//    client.publish("plugcontrollerapp", "TURNEDON");
//    digitalWrite(RELAY,  HIGH);
//  }
//  else if(MSG == "OFF")
//  {
//    currentTimer = 0;
//    digitalWrite(RELAY, LOW);
//    client.publish("plugcontrollerapp", "TURNEDOFF");
//  }
//  else if(MSG == "STATUS")
//  {
//    if(digitalRead(RELAY)) client.publish("plugcontrollerapp", "TURNEDON");
//    else if(!digitalRead(RELAY)) client.publish("plugcontrollerapp", "TURNEDOFF"); 
//  }
//}